{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","this","props","isGeolocationAvailable","isGeolocationEnabled","coords","MapContainer","center","latitude","longitude","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","position","Popup","className","React","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAMMA,E,4JACJ,WACE,OAAQC,KAAKC,MAAMC,uBAEdF,KAAKC,MAAME,qBAEZH,KAAKC,MAAMG,OACb,eAACC,EAAA,EAAD,CACEC,OAAQ,CAACN,KAAKC,MAAMG,OAAOG,SAAUP,KAAKC,MAAMG,OAAOI,WACvDC,KAAM,EACNC,iBAAiB,EAHnB,UAKE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CACEC,SAAU,CAACf,KAAKC,MAAMG,OAAOG,SAAUP,KAAKC,MAAMG,OAAOI,WAD3D,SAGE,cAACQ,EAAA,EAAD,8BAIJ,qBAAKC,UAAU,SAAf,yBAlBA,qBAAKA,UAAU,SAAf,wCAFA,qBAAKA,UAAU,SAAf,2D,GAHYC,IAAMC,WA4BTC,uBAAW,CACxBC,gBAAiB,CACfC,oBAAoB,GAEtBC,oBAAqB,KAJRH,CAKZrB,GC3BYyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b62b2fc7.chunk.js","sourcesContent":["import React from \"react\";\nimport { TileLayer, MapContainer, Marker, Popup } from \"react-leaflet\";\nimport { geolocated } from \"react-geolocated\";\nimport \"./App.css\";\nconst DEFAULT_LATITUDE = 0;\nconst DEFAULT_LANGITUDE = 0;\nclass App extends React.Component {\n  render() {\n    return !this.props.isGeolocationAvailable ? (\n      <div className=\"center\">Your browser does not support Geolocation</div>\n    ) : !this.props.isGeolocationEnabled ? (\n      <div className=\"center\">Geolocation is not enabled</div>\n    ) : this.props.coords ? (\n      <MapContainer\n        center={[this.props.coords.latitude, this.props.coords.longitude]}\n        zoom={2}\n        scrollWheelZoom={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker\n          position={[this.props.coords.latitude, this.props.coords.longitude]}\n        >\n          <Popup>I am here.</Popup>\n        </Marker>\n      </MapContainer>\n    ) : (\n      <div className=\"center\"> Loading.. </div>\n    );\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}